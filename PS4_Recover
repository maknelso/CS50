3rd time doing it: Not sure why if (counter > 0) has to come before if (counter == 0)

#include <stdio.h>
#include <stdlib.h> // for free() fx
#include <stdint.h> // for typedef

// Global variable that should not be changed - we want to set 512 bytes
const int BLOCK = 512;

// Give myself a new data type called BYTE so I can use later down below
typedef uint8_t BYTE;

int main(int argc, char *argv[])
{
    if (argc != 2)
    {
        printf("Usage: ./recover image\n");
        return 1;
    }

    // Open memory card - card.raw
    FILE *file = fopen (argv[1], "r");
    if (file == NULL)
    {
        return 1;
    }

    // Give myself a buffer/an array of bytes
    BYTE buffer[BLOCK];
    // **IMPORTANT: Have to declare variable "img" as a pointer to... NULL for now.
    FILE *img;
    // **IMPORTANT: Allocate memory for name of JPEG "000.jpg\0"
    char filename[8];
    // Initialize counter
    int counter = 0;

    // If fread can read the entire block, it will return to you "number" or 1
    while (fread(buffer, sizeof(buffer), 1, file) == 1)
    {
        if (buffer[0] == 0xff && buffer[1] == 0xd8 && buffer[2] == 0xff && (buffer[3] & 0xf0) == 0xe0)
        {
            // *This has to be before counter == 0 because otherwise, it will say counter == 0 then counter++, it will be counter > 0 so both will run
            if (counter > 0)
            {
                // Close the previously opened file
                fclose(img);

                sprintf(filename, "%03i.jpg", counter);
                counter++;

                img = fopen(filename, "w");

                fwrite(buffer, sizeof(buffer), 1, img);
            }

            // if first file -> don't need to close file
            if (counter == 0)
            {
                // Making a new JPEG sprintf -> print to a string
                sprintf(filename, "%03i.jpg", counter);
                counter++;

                // Open to a new file - store contents of filename in a pointer named img
                img = fopen(filename, "w");

                // Write data to a file - write to a pointer named img
                fwrite(buffer, sizeof(buffer), 1, img);
            }

        }
        // else if - after reading 512 bytes, there is no new JPEG header found, continue writing another 512 bytes
        else if (counter > 0)
        {
            fwrite(buffer, sizeof(buffer), 1, img);
        }
    }

    // If fread no longer turns 1, then it is the end of the file: close img (pointer to a FILE) and close file (pointer to card.raw)
    fclose(img);
    fclose(file);

    return 0;
}


--------------------------------------------------------------------------------------------------------------------------------

//2nd time doing it

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <cs50.h>

const int BLOCK = 512;

// Give me a new data type called BYTE (which is an unsigned char)
typedef uint8_t BYTE;

int main(int argc, char *argv[])
{
        if (argc != 2)
        {
            printf("Usage: ./recover image\n");
            return 1;
        }

        // Open memory card
        FILE *file = fopen (argv[1], "r");
        if (file == NULL)
        {
            return 1;
        }

        // Give myself an array of 512 bytes
        BYTE buffer[BLOCK];

        // Declare img as a pointer
        FILE *img;

        // Allocate memory for name of jpeg
        char filename[8];

        // Initialize counter
        int counter = 0;

        // Trick here: while loop => at the end of every if, else if stmt there is an fwrite of 512 bytes
        while (fread(buffer, sizeof(buffer), 1, file) == 1)
        {
            // if if if - not mutually exclusive, if condition is true, do it
            // Check if first 4 bytes starts with JPEG header
            if (buffer[0] == 0xff && buffer[1] == 0xd8 && buffer[2] == 0xff & (buffer[3] & 0xf0) == 0xe0)
            {
                // file already created - this has to be in front (not 100% sure why)
                if (counter > 0)
                {
                    // close previous file
                    fclose(img);

                    // Create a NEW file to write to
                    sprintf(filename, "%03i.jpg", counter);
                    counter++;

                    // Open new file
                    img = fopen(filename, "w");

                    // Write in new file
                    fwrite (buffer, sizeof(buffer), 1, img);
                }

                // no file created yet
                if (counter == 0)
                {
                    // Create a NEW file to write to - called filename
                    sprintf(filename, "%03i.jpg", counter);
                    counter++;

                    // Open new file - store contents of filename in a pointer named img
                    img = fopen(filename, "w");

                    // Write in new file - write to img pointer until you hit a new JPEG header
                    fwrite (buffer, sizeof(buffer), 1, img);
                }
            }
            // Trick here: else if (mutually exclusive). First 4 bytes are NOT JPEG header, keep writing another 512 bytes
            // Need ( ) after else if
            else if (counter > 0)
            {
                fwrite(buffer, sizeof(buffer), 1, img);
            }
        }

        // Close all files
        fclose(img);
        fclose(file);

        return 0;
}

--------------------------------------------------------------------------------

// 1st time doing it

#include<stdio.h>
#include<stdlib.h>
#include<stdint.h>
#include<cs50.h>

// Define the block_size as 512 bytes
#define block_size 512

// Make a struct -> give me a new data type, type uint8_t (it is unsigned char - # from 0 to 255 instead of -128 to 127), named BYTE
typedef uint8_t BYTE;

int main(int argc, char* argv[])
{
    if (argc != 2)
    {
        fprintf(stderr, "Usage ./recover image\n");
        return 1;
    }

    // Open input file: open the file the human typed @ prompt and read it
    // Give me a pointer to raw_card_data called FILE -> for now, think of it as: stores contents of a file for me
    FILE *raw_card_data = fopen(argv[1], "r");

    if (raw_card_data == NULL)
    {
        printf("Sorry, could not open file\n");
        return 2;
    }

    // Give myself a buffer of block_size (512 bytes). Remember BYTE is essentially unsigned char
    BYTE buffer[block_size];
    
    // FILE I will be writing to: The type of value is going to be the address of a FILE, called img.
    FILE* outptr;

    // Allocate enough memory for name of jpeg is stored in this array "000.jpg\0" - array is called filename
    char filename[8];
    
    // To initialize counter for 03?.jpg file name(s) 
    int counter = 0;

    // While fread can read from buffer, read 512 bytes, from input raw_card_data:
    // fread returns the number of items of size (sizeof(buffer)) that were read
    // We currently try to read number (1) elements of size (sizeof(buffer))
    // So most likely, if fread is able to read all of that data, it will return back to you number (1).
    // Or, if return number differs from 1, then either an error had occured of End of File was reached.
    while (fread(buffer, sizeof(buffer), 1, raw_card_data) == 1)
    {
        if(buffer[0] == 0xff && buffer[1] == 0xd8 && buffer[2] == 0xff && (buffer[3] & 0xf0) == 0xe0)
        {
            if (counter > 0)
            {
                // Close already open file -> remember: outptr is address of FILE
                fclose(outptr);

                // Name outfile using sprintf
                sprintf(filename,"%03d.jpg", counter);
                counter++;

                // Open new file for writing
                // fopen, opens a file and returns a pointer to it
                outptr = fopen(filename, "w");

                // Write to outfile
                fwrite(buffer, sizeof(buffer), 1, outptr);
            }
            if (counter == 0)
            {
                // Print not to the terminal, print to a string.
                // String print. Instead of printing on console, it store output on/in char named filename
                sprintf(filename,"%03d.jpg", counter);
                counter++;

                // Open new file with that file name just String Printed.
                // Write to this new file, all the data you found in the memory card
                outptr = fopen(filename, "w");

                // Write to outfile, read from buffer
                fwrite(buffer, sizeof(buffer), 1, outptr);
            }
        }
        // If counter is bigger than 0 but first 4 bytes are not JPEG headers, just keep writing another 512 bytes. 
        // Remember slack space! There is wasted space if the JPEG does not take up all 512 byte block.
        else if (counter > 0)
        {
            fwrite(buffer, sizeof(buffer), 1, outptr);
        }
    }

    fclose(outptr);
    fclose(raw_card_data);

    //success
    return 0;
}
