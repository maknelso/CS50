// Implements a dictionary's functionality
#include <ctype.h>      // for tolower fx used in hash fx
#include <stdbool.h>    // for bools
#include <stdio.h>      // for fopen and fclose fx
#include <stdlib.h>     // for malloc
#include <string.h>     // for strcpy
#include <strings.h>    // for strcasecmp
#include "dictionary.h" // use delcarative files in dictionary.h (header file)

// Defines struct for a node
typedef struct node
{
    char word[LENGTH + 1];
    struct node *next;
}
node;

// Number of buckets in hash table
const unsigned int N = 50;
// Initialize wordcount for size f(x)
int word_count = 0;
// Hash table - HT is an array of linked lists. And linked list are nodes linked together.
node *table[N];

// Returns true if word is in dictionary else false
bool check(const char *word)
{
    // Obtain the hash index
    int index = hash(word);

    // Access LL at that index in HT, then traverse LL (one node at a time) and look for the word using strcasecmp
    // Point cursor to what head of the table is pointing to
    node *cursor = table[index];
    while (cursor != NULL)
    {
        // Traverse
        if (strcasecmp(cursor->word, word) == 0)
        {
            return true;
        }
        cursor = cursor->next;
    }
    // cursor == NULL, if true is not returned, then return false
    return false;
}

// Hashes word to a number. Source: djib2 by Dan Bernstein (http://www.cse.yorku.ca/~oz/hash.html)
unsigned int hash(const char *word)
{
    unsigned long hash = 5381;
    int c = *word;
    c = tolower(c);

    while (*word != 0)
    {

        hash = ((hash << 5) + hash) + c;
        c = *word++;
        c = tolower(c);
    }
    return hash % N;
}

// Loads dictionary into memory, returning true if successful else false
bool load(const char *dictionary)
{
    // Open the dictionary
    FILE *file = fopen(dictionary, "r");
    if (file == NULL)
    {
        return false;
    }

    // Read one word at a time from file (pointer to dictionary)
    // Declare and allocate memory or buffer named word
    char word[LENGTH + 1];

    // word is a buffer that we will be reading scanning into
    while (fscanf(file, "%s", word) != EOF)
    {
        // Create a new node for each word (to store that particular word from file inside HT)
        node *new_node = malloc(sizeof(node));
        if (new_node == NULL)
        {
            return false;
        }
        // Copy word from file to new_node's word
        strcpy(new_node->word, word);

        // Insert node into HT:
        // Obtain hash index value
        int index = hash(word);

        // Insert new nodes at beginning of lists
        if (table[index] == NULL)
        {
            // Make new_node the head of the LL: have head of the LL point to the new_node
            table[index] = new_node;
            new_node->next = NULL;
        }
        else
        {
            // Initialize new node's next to point to what the head of the node is pointing to
            new_node->next = table[index];
            // Then head of the node should point to n
            table[index] = new_node;
        }
        word_count++;
    }
    fclose(file);
    return true;
}

// Returns number of words in dictionary if loaded else 0 if not yet loaded
unsigned int size(void)
{
    return word_count;
}

// Unloads dictionary from memory, returning true if successful else false
bool unload(void)
{
    // Free each of the nodes in LL
    // Iterate over the HT, go over each one of the individual LL and call free() on all of the nodes inside LL
    for (int i = 0, n = (N - 1); i < n; i++)
    {
        // Initialize head pointer to table[i]
        node *head = table[i];
        // Initialize cursor pointer to point to what head is pointing to
        node *cursor = head;
        // Initialize tmp pointer to point to what head is pointing to
        node *tmp = head;

        // Has to be cursor!= NULL, not cursor->next != NULL
        // If you did cursor->next != NULL, then you are not freeing the last node
        while(cursor != NULL)
        {
            // Mover cursor to the next node
            cursor = cursor->next;
            // Free tmp
            free(tmp);
            // Set tmp to point to where the moved cursor is pointing to now
            tmp = cursor;
        }
    }
    return true;
}
