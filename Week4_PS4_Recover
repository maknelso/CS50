#include<stdio.h>
#include<stdlib.h>
#include<stdint.h>
#include<cs50.h>

// Define the block_size as 512 bytes
#define block_size 512

// Make a struct -> give me a new data type, type uint8_t (it is unsigned char), named BYTE
typedef uint8_t BYTE;

int main(int argc, char* argv[])
{
    if (argc != 2)
    {
        fprintf(stderr, "Usage ./recover image\n");
        return 1;
    }

    // Open input file
    FILE* raw_card_data = fopen(argv[1], "r");

    if (raw_card_data == NULL)
    {
        printf("Sorry, could not open file\n");
        return 2;
    }

    // Give myself a buffer of block_size (512 bytes)
    BYTE buffer[block_size];

    // To initialize counter recovered img number
    int counter = 0;

    // File pointer I'll be writing to
    FILE *img;

    // Name of jpeg is stored in this array 000.jpg\0 - don't fully understand
    char filename[8];

    while (fread(buffer, sizeof(buffer), 1, raw_card_data) == 1)
    {
        if(buffer[0] == 0xff && buffer[1] == 0xd8 && buffer[2] == 0xff && (buffer[3] & 0xf0) == 0xe0)
        {
            if (counter > 0)
            {
                // Close already open file
                fclose(img);

                // Name outfile using sprintf
                sprintf(filename,"%03d.jpg", counter);
                counter++;

                // Open new file for writing
                img = fopen(filename, "w");

                // Write to outfile
                fwrite(buffer, sizeof(buffer), 1, img);
            }

            if (counter == 0)
            {
                // Name outfile using sprintf
                sprintf(filename,"%03d.jpg", counter);
                counter++;

                // Open newfile for writing
                img = fopen(filename, "w");

                // Write to outfile
                fwrite(buffer, sizeof(buffer), 1, img);
            }
        }

        else if (counter > 0)
        {
            fwrite(buffer, sizeof(buffer), 1, img);
        }

    }

    fclose(img);
    fclose(raw_card_data);

    //success
    return 0;
}
