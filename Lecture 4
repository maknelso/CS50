If we count in binary, we can only count from 0-255 (256 #s)
If we count in hexadecimal, we use FF. 0F = 15, 10 = 16 in hexadecimal => prefix with 0x so 0x10 = 16 in hexadecimal

Describe RGB in hexadecimal digitsL 00 00 00 => no red, no green, no blue => absence of color = black

hexadecimal prefix => 0x

& -> ampersand means get the address of => &n
* -> means go to that address
%p -> prints out the address for us

printf("%p\n", &n);

- when you ask computer for address of some value, you are getting a pointer to that value, pointer is an address in that computer's memory.
- %p (pointer/address of some value)
- * (is the opposite of the address of operator) -> it says go to a specific address

printf("%i\n", *&n);    // *& undoes it, have to print %i

- we can store addresses and variables themselves:
- if you want to STORE the address of a value in a variable, you have to specify not just the type of value, but with * operator, that this is a pointer. 
e.g. int *p = &n;

int *p => means this is a pointer/address to an int

#include <stdio.h>

int main (void)
{
    int n = 50;
    int *p = &n;
 
    printf("%p\n", p);
}

- Rarely, after today, do we care about the specific addresses where things are

- you store the address of n, in p. P is a pointer/address to an integer. CLANG knows if you're getting the address of something, you must store it in a pointer,
you cannot just store it as an integer. 

#include <stdio.h>

int main (void)
{
    int n = 50;
    int *p = &n;
    
    printf("%i\n", *p);
}


=> essentially, p is another variable that is storing the address of n. Essentially just a pointer to n.
=> typically, we don't care what address of n is. We just care that we can access it
=> FYI: most pointers are 64 bit (or long)
-----------------------
There are no strings!

string s = "EMMA";

EMMA\0    => addresses of each is back to back (eight 0 bits)

s is a pointer. It stores the first address of 'E' (the beginning).  s is a pointer to Emma's actual name in memory.
Computer is smart enough to look for null terminating character to know when the "string" ends.

string is char * => it is a variable that contains the address of a char

string s = "EMMA";
char *s = "EMMA";       => * represents an address, char represents the type of address being pointed at. char * allows you to store the address of or point at a character.

typedef char *string;   => char * means the type of value is going to be an address of a char, name we want to give is string (CS50.h)

---------------------------
#include <stdio.h>

int main (void)
{
    char *s = "EMMA";
    printf("%c\n", *s);             // go to the address of s -> s is the first character
    printf("%c\n", *(s + 1));       // this prints out second character
}

s[1] => is syntactic sugar it, computer under the hood does (s + 1)

printf - knows to print out every char until it sees null terminator character

------------------------------------

- cannot compare two strings with if (i == j) because we are getting two different locations in memory
- get_string has been returning a pointer. a pointer to the first address of the first char 

------------------------------------
50:00 -> both s and t are upper-cased
#include <cs50.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include <stdlib.h>

int main(void)
{
    // example input is emma
    char *s = get_string("s: ");

    // we are copying s into t (copying the address literally) => s and t are both pointing to the same memory
    char *t = s;

    // go into the first character in t and uppercase it, so 'e' is now "e"
    t[0] = toupper(t[0]);

    printf("%s\n", s);
    printf("%s\n", t);
}

-----------------------------------------------------------
only t is uppercased, but not s
#include <cs50.h>
#include <stdio.h>
#include <ctype.h>
#include <string.h>     // for strlen fx
#include <stdlib.h>

int main(void)
{
    // example input is emma
    // get_string just returns the address of the string from human
    char *s = get_string("s: ");

    // memory allocate: however many bytes the human input s is + 1 for null terminating character
    // strlen is pronounced string length
    // malloc returns the address of the first byte of that memory as well (hand me back a pointer) -> store in t
    char *t = malloc(strlen(s) + 1);
    
    // copy INTO t, the CONTENTS of s (i.e. copy FROM s to T)
    // prnounced string copy
    strcpy(t, s);
    
    // do not actually need this -> use strcpy()
    //iterate THROUGH (not just up to) the length because we want to copy the null terminating character as well
    // doing the copying
    //for (int i = 0, n = strlen(s); i < n + 1; i++)
    //{
    //    t[i] = s[i];
    //}
    
    t[0] = toupper(t[0]);
    
    printf("%s\n", s);
    printf("%s\n", t);
    
    // free the address of the chunk of memory that malloc returned to me
    free(t);
}

BREAK --------------------58:45 ---------------- BREAK

valgrind ./copy
help50 valgrind ./copy


