Notes:

separate functions:

int find_min(void)  -> you have to return an int
bool print_winner(void) -> you have to return a bool (e.g. return true; return false;)

== means equality
= means to assign

// if eliminated status is false
if (candidates[i].eliminated == false) 
{
    // assign true to the candidate's eliminated status
    candidates[i].eliminated = true; 
}


// this does not seem to work
bool vote(int voter, int rank, string name)
{
    for (int i = 0, m = voter_count; i < m; i++)
    {
        for (int j = 0, n = candidate_count; j < n; j++)
        {
            if (strcmp(name, candidates[i].name) == 0)
            {
                preferences[voter][rank] = j;
                return true;
            }
        }
    }
    return false;
}

-----------------------------------

#include <cs50.h>
#include <stdio.h>
#include <string.h> // for strcmp fx

// Max voters and candidates
#define MAX_VOTERS 100
#define MAX_CANDIDATES 9

// preferences[i][j] is jth preference for voter i
int preferences[MAX_VOTERS][MAX_CANDIDATES];

// Candidates have name, vote count, eliminated status
typedef struct
{
    string name;
    int votes;
    bool eliminated;
}
candidate;

// Array of candidates
candidate candidates[MAX_CANDIDATES];

// Numbers of voters and candidates
int voter_count;
int candidate_count;

// Function prototypes
bool vote(int voter, int rank, string name);
void tabulate(void);
bool print_winner(void);
int find_min(void);
bool is_tie(int min);
void eliminate(int min);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: runoff [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX_CANDIDATES)
    {
        printf("Maximum number of candidates is %i\n", MAX_CANDIDATES);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
        candidates[i].eliminated = false;
    }

    voter_count = get_int("Number of voters: ");
    if (voter_count > MAX_VOTERS)
    {
        printf("Maximum number of voters is %i\n", MAX_VOTERS);
        return 3;
    }

    // Keep querying for votes
    for (int i = 0; i < voter_count; i++)
    {

        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            // Record vote, unless it's invalid
            if (!vote(i, j, name))
            {
                printf("Invalid vote.\n");
                return 4;
            }
        }

        printf("\n");
    }

    // Keep holding runoffs until winner exists
    while (true)
    {
        // Calculate votes given remaining candidates
        tabulate();

        // Check if election has been won
        bool won = print_winner();
        if (won)
        {
            break;
        }

        // Eliminate last-place candidates
        int min = find_min();
        bool tie = is_tie(min);

        // If tie, everyone wins
        if (tie)
        {
            for (int i = 0; i < candidate_count; i++)
            {
                if (!candidates[i].eliminated)
                {
                    printf("%s\n", candidates[i].name);
                }
            }
            break;
        }

        // Eliminate anyone with minimum number of votes
        eliminate(min);

        // Reset vote counts back to zero
        for (int i = 0; i < candidate_count; i++)
        {
            candidates[i].votes = 0;
        }
    }
    return 0;
}

// Record preference if vote is valid
// Not 100% sure of this vote function -> will have to double check after I implement the rest of the functions
// Try using a inner and outer loop to fill this out
bool vote(int voter, int rank, string name)
{
    for (int i = 0, n = candidate_count; i < n; i++)
    {
        if (strcmp(candidates[i].name, name) == 0)
        {
            preferences[voter][rank] = i;
            return true;
        }
    }
    return false;
}

// Tabulate votes for non-eliminated candidates
void tabulate(void)
{
    // for the number of voters
    for (int i = 0, m = voter_count; i < m; i++)
    {
        for (int j = 0, n = candidate_count; j < n; j++)
        {
            if (candidates[preferences[i][j]].eliminated == false)
            {
                candidates[preferences[i][j]].votes++;
                // need this break -> breaks out of the inner loop and goes to the outter loop
                break;
            }
        }
    }
}

// Print the winner of the election, if there is one
bool print_winner(void)
{
    // if any candidate has more than half the vote, print out their name and return true
    // else, return false
    for (int i = 0, n = candidate_count; i < n; i++)
    {
        if (candidates[i].votes > 0.5 * voter_count)
        {
            printf("%s\n", candidates[i].name);
            return true;
        }
    }
    return false;
}

// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    int min = voter_count;

    for (int i = 0, n = candidate_count; i < n; i++)
    {
        if (candidates[i].votes < min && candidates[i].eliminated == false)
        {
            min = candidates[i].votes;
        }
    }
    return min;
}

// Return true if the election is tied between all candidates, false otherwise
bool is_tie(int min)
{
    for (int i = 0, n = candidate_count; i < n; i++)
    {
        // if candidates are not eliminated and their votes are not equal to the minimum vote, there is no tie. Lowest vote candidate gets eliminated
        if (candidates[i].eliminated == false && candidates[i].votes != min)
        {
            return false;
        }
    }
    // (else) - this means the votes are equal to the min vote, so there is a tie of min vote
    return true;
}

// Eliminate the candidate (or candidates) in last place
void eliminate(int min)
{
    for (int i = 0, n = candidate_count; i < n; i++)
    {
        if (candidates[i].eliminated == false && candidates[i].votes == min)
        {
            candidates[i].eliminated = true;
        }
    }
    return;
}

-----------------------------------------------------------------------------------------------------------

1st time doing it:

#include <cs50.h>
#include <stdio.h>
#include <string.h>             //need for strcmp fx

// Do not fully understand preferences[i][j]. 
// for voter i, j is their preference
// vote f(x) - what is preferences[voter][rank]

// Max voters and candidates
#define MAX_VOTERS 100
#define MAX_CANDIDATES 9

// preferences[i][j] is jth preference for voter i
int preferences[MAX_VOTERS][MAX_CANDIDATES];

// Candidates have name, vote count, eliminated status
typedef struct
{
    string name;
    int votes;
    bool eliminated;
}
candidate;

// Array of candidates
candidate candidates[MAX_CANDIDATES];

// Numbers of voters and candidates -> global variables
int voter_count;
int candidate_count;

// Function prototypes
bool vote(int voter, int rank, string name);
void tabulate(void);
bool print_winner(void);
int find_min(void);
bool is_tie(int min);
void eliminate(int min);

int main(int argc, string argv[])
{
    // Check for invalid usage
    if (argc < 2)
    {
        printf("Usage: runoff [candidate ...]\n");
        return 1;
    }

    // Populate array of candidates
    candidate_count = argc - 1;
    if (candidate_count > MAX_CANDIDATES)
    {
        printf("Maximum number of candidates is %i\n", MAX_CANDIDATES);
        return 2;
    }
    for (int i = 0; i < candidate_count; i++)
    {
        candidates[i].name = argv[i + 1];
        candidates[i].votes = 0;
        candidates[i].eliminated = false;
    }

    voter_count = get_int("Number of voters: ");
    if (voter_count > MAX_VOTERS)
    {
        printf("Maximum number of voters is %i\n", MAX_VOTERS);
        return 3;
    }

    // Keep querying for votes
    for (int i = 0; i < voter_count; i++)
    {
        // Query for each rank
        for (int j = 0; j < candidate_count; j++)
        {
            string name = get_string("Rank %i: ", j + 1);

            // Record vote, unless it's invalid
            if (!vote(i, j, name))
            {
                printf("Invalid vote.\n");
                return 4;
            }
        }
        printf("\n");
    }

    // Keep holding runoffs until winner exists
    while (true)
    {
        // Calculate votes given remaining candidates
        tabulate();

        // Check if election has been won
        bool won = print_winner();
        if (won)
        {
            break;
        }

        // Eliminate last-place candidates
        int min = find_min();
        bool tie = is_tie(min);

        // If tie, everyone wins
        if (tie)
        {
            for (int i = 0; i < candidate_count; i++)
            {
                if (!candidates[i].eliminated)
                {
                    printf("%s\n", candidates[i].name);
                }
            }
            break;
        }

        // Eliminate anyone with minimum number of votes
        eliminate(min);

        // Reset vote counts back to zero
        for (int i = 0; i < candidate_count; i++)
        {
            candidates[i].votes = 0;
        }
    }
    return 0;
}

// 1) Record preference if vote is valid
// If name is a match, update global preferences array to indicate voter has the candidate
// as their rank preferences - 0 is 1st, 1 is 2nd, etc.
bool vote(int voter, int rank, string name)
{
    for (int i = 0; i < candidate_count; i++)
    {
        // check if name is among the candidates' names by comparing 2 strings
        if (strcmp(candidates[i].name, name) == 0)
        {
            // if found the person's name, add that number as a rank in pref array
            // for voter i, their 1st choice is preferences[i][0], 2nd choice is preferences[i][1]
            preferences[voter][rank] = i;  // voter and rank are inputs above
            return true;
        }
    }
    return false;
}

// 2) Tabulate (update) votes counts for non-eliminated candidates -- not too sure
void tabulate(void)
{
    for (int i = 0; i < voter_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (!candidates[preferences[i][j]].eliminated)
            {
                candidates[preferences[i][j]].votes++;
                break;
            }
        }
    }
}

// 3) Print the winner of the election, if there is one
bool print_winner(void)
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (candidates[i].votes > 0.5 * voter_count)
        {
            printf("%s\n", candidates[i].name);
            return true;
        }
    }
    return false;
}

// 4) Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    int min = voter_count;                          //cannot be 0 here - not 100% sure

    for (int i = 0; i < candidate_count; i++)
        if (!candidates[i].eliminated && candidates[i].votes < min)
            min = candidates[i].votes;

    return min;
}

// 5) Return true if the election is tied between ALL candidates, false otherwise
// From above, if(won), then print_winner(). Otherwise, if tie, print out all the candidate names
// I think this scenario works... have to try a bunch of different scenarios
bool is_tie(int min)
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (!candidates[i].eliminated)          //go through array, if candidate is not eliminated
            if (candidates[i].votes != min)     //and if votes received by candidates is not equal to min
                    return false;
    }
    return true;
}

// 6) Eliminate the candidate (or candidiates) in last place
void eliminate(int min)
{
    for (int i = 0; i < candidate_count; i++)
        if (!candidates[i].eliminated && candidates[i].votes == min)
            candidates[i].eliminated = true;
}
