Lecture 2 - Arrays (done in C)

In real world, you write tests, to ensure that your program is running correctly.

In CS50 IDE: red dot, you need to CTRL S.

- Use help50
=> help50 make buggy0

debugging:
1st solution: use printf

//Buggy example for printf and debug50
#include <stdio.h>
int main (void)
{
    for (int i = 0; i <= 10; i++)
    {
        printf("i is now %i: ", i);                 //using printf -> we see that the first i starts at 0 
        printf("#\n");
    }
}

2nd solution: CS50 IDE (integrated development environment) debugging tools
- Click the red dot on line with int main(void)   => breakpoint 
- tell computer in advance, STOP at the red dot. And allow the human to step through the program step by step.

run: debug50 ./buggy2

-> on the RHS:
variable: i
value: 0 
type: int 

step over icon -> execute it 1 by 1.

i becomes 1

CTRL C to exit

Starting in 54:33 - dynamically asking for score and giving you an average

//2nd time doing it:

#include <cs50.h>
#include <stdio.h>

float average(int length, int array[]);             //prototype - end with semicolon

int main (void)
{
    int n = get_int("Number of scores: ");            //prompt user for number of scores
    
    int scores[n];                                    //declare array with size n
    
    for (int i = 0; i < n; i++)
    {
        scores[i] = get_int("Score %i: ", i + 1);      //keep asking for actual scores and store them in array, i+1 to print at score 1, 2, 3
    }

    printf("Average: %.1f\n", average(n, scores));     //average needs length of array (n) and array itself (scores - name of array)
}

//create average function - initialize it as a float
//need to know: 1)length of the array, 2)array itself - length and array are just names. It takes two input: an int, and an array of ints
float average(int length, int array[])                  
{
    int sum = 0;                                        //initialize sum
    for (int i = 0; i < length; i++)
    {
        sum += array[i];                                //sum = sum + array[i];
    }
    return (float) sum / (float) length;                //the fx named average outputs a float (above)
}

-----------------------------------------------------------------------------------------------------------

//1st time doing it:
#include <cs50.h>
#include <stdio.h>

float average(int length, int array[]);            //telling (declares) compiler there is a f(x) average - see below

int main(void)
{
    int n = get_int("Number of scores: ");         //step 1: ask how many assignments    

    int scores[n];                                 //step 2: array > put n into scores array [n] -> # of scores

    for (int i = 0; i < n; i++)                    //step 3: prompt user to keep asking for score until i==n
    {
        scores[i] = get_int("Score %i: ", i + 1);  //stores the input user gives to scores array [i] -> actual scores   
    }

    printf("Average: %.1f\n", average(n, scores)); //n = len of array, scores = name of array, .1 shows 1 decimal -> not sure about average(n, scores) why do we need it?
}


float average(int length, int array[])          //returns float named average (create average). In C, arrays do not remember own length
{
    int sum = 0;                                //start counting from 0
    for (int i = 0; i < length; i++)
    {
        sum += array[i];                        //sum = sum + next item in array - get bracket [0]+[1]+[2] to sum
    }
    return (float)sum/(float)length;            //want decimals in your score (do not divide int by int)
}

Example finished @  1:04:00
-----------------------------------------------------------------------------------------------------------------


Around 1:20:00 - string.c example

Print out individual character examples

#include <cs50.h>
#include <stdio.h>
#include <string.h>                         //for strlen

int main(void)
{
    string s = get_string("Input: ");
    printf("Output: ");
    
    int n = strlen(s)                       //can make this more succinct - see below
    for (int i = 0; s[i] != '\0'; i++)
    {
        printf("%c", s[i]);
    }
printf("\n");
}

or 

#include <cs50.h>
#include <stdio.h>
#include <string.h>                         //for strlen

int main(void)
{
    string s = get_string("Input: ");
    printf("Output: ");
   
    for (int i = 0, n = strlen(s); i < n; i++)      //more succinct stylistically 
    {
        printf("%c", s[i]);
    }
printf("\n");
}

----------------------------------------------------------------------------------------

Upper case example

int main (void)
{
    string s = get_string ("Before: ");
    printf("After: ");
    for (int i = 0, n = strlens); i < n; i++)
    {
        if (s[i] >= 'a' && s[i] <= 'z')
        {
            printf("%c", s[i] - 32);
        }
        else
        {
            printf("%c", s[i]);
        }
    }
printf("\n");
}

There is already a function in C that can do uppercase

#include <ctype.h>

for
{
    printf("%c", toupper(s[i]));
}






